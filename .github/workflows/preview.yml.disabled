name: PR Preview & Validation

on:
  pull_request:
    branches:
      - master
      - main
    types: [opened, synchronize, reopened]

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: 🏗️ Build site
        run: |
          python build.py --validate
        env:
          PYTHONUNBUFFERED: 1
      
      - name: 📊 Generate validation report
        if: always()
        run: |
          if [ -f validation-report.json ]; then
            echo "## 📊 Validation Report" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Parse JSON and create summary
            python -c "
import json
with open('validation-report.json') as f:
    data = json.load(f)
    summary = data['summary']
    
    print('### Overall Status')
    print(f\"- **Tests Run**: {summary['total_tests']}\")
    print(f\"- **Passed**: ✅ {summary['passed']}\")
    print(f\"- **Failed**: {'❌ ' + str(summary['failed']) if summary['failed'] > 0 else '✅ 0'}\")
    print(f\"- **Errors**: {'🔴 ' + str(summary['total_errors']) if summary['total_errors'] > 0 else '✅ 0'}\")
    print(f\"- **Warnings**: {'⚠️ ' + str(summary['total_warnings']) if summary['total_warnings'] > 0 else '✅ 0'}\")
    print()
    
    if summary['total_errors'] == 0:
        print('### ✅ All Quality Gates Passed!')
    else:
        print('### ⚠️ Quality Issues Found')
        print()
        print('Check the detailed report artifact for more information.')
            " >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: 📊 Upload validation report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pr-validation-report
          path: validation-report.json
          retention-days: 30
      
      - name: 📦 Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: pr-preview-site
          path: docs/
          retention-days: 7
      
      - name: 💬 Comment on PR
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let comment = '## 🔍 Build & Validation Results\n\n';
            
            if (fs.existsSync('validation-report.json')) {
              const report = JSON.parse(fs.readFileSync('validation-report.json', 'utf8'));
              const s = report.summary;
              
              comment += '### Validation Summary\n';
              comment += `- Tests: ${s.passed}/${s.total_tests} passed\n`;
              comment += `- Errors: ${s.total_errors === 0 ? '✅' : '❌'} ${s.total_errors}\n`;
              comment += `- Warnings: ${s.total_warnings === 0 ? '✅' : '⚠️'} ${s.total_warnings}\n\n`;
              
              if (s.total_errors === 0) {
                comment += '### ✅ All quality gates passed!\n\n';
                comment += 'This PR is ready for review and merge.\n';
              } else {
                comment += '### ⚠️ Quality issues detected\n\n';
                comment += 'Please review the validation report artifact for details.\n';
              }
            } else {
              comment += '⚠️ Validation report not found.\n';
            }
            
            comment += '\n---\n';
            comment += `📦 Build artifact: [pr-preview-site](../artifacts)\n`;
            comment += `📊 Validation report: [pr-validation-report](../artifacts)\n`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
      
      - name: ❌ Fail if errors found
        if: always()
        run: |
          if [ -f validation-report.json ]; then
            errors=$(python -c "import json; print(json.load(open('validation-report.json'))['summary']['total_errors'])")
            if [ "$errors" -gt 0 ]; then
              echo "❌ Found $errors validation errors"
              exit 1
            fi
          fi
